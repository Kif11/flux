{"version":3,"file":"static/webpack/static/development/pages/index.js.d07ae118d4899af060ed.hot-update.js","sources":["webpack:///./src/components/JoinForm/index.tsx"],"sourcesContent":["import { useState, FC } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport * as yup from 'yup';\nimport InputField from '../../components/InputField';\nimport Button from '../../components/Button';\nimport ErrorMessage from '../../components/ErrorMessage';\nimport s from './index.module.css';\n\ninterface APIErrorResponse {\n  error: string;\n}\n\ntype InputProps = {\n  value: string;\n  name: string;\n  validationMessage: string;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype Question = {\n  key: string;\n  value: string;\n};\n\nexport const useInput = (\n  name: string,\n  validation: (value: string) => yup.StringSchema<string>,\n  defaultValue: string,\n): InputProps => {\n  const [value, setValue] = useState(defaultValue || '');\n  const [error, setError] = useState('');\n\n  const handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ): void => {\n    const { value: val } = event.target;\n\n    const schema = validation(value);\n\n    schema\n      .validate(val)\n      .then(() => setError(''))\n      .catch(err => setError(err.message));\n\n    setValue(val);\n  };\n\n  return {\n    value,\n    name,\n    validationMessage: error,\n    onChange: handleInputChange,\n  };\n};\n\nexport const areInputsValid = (inputs: InputProps[]): boolean => {\n  let valid = true;\n\n  for (let i = 0; i < inputs.length; i += 1) {\n    const input = inputs[i];\n\n    const isValue = !!input.value;\n    const isError = !!input.validationMessage;\n\n    if (isError || !isValue) {\n      valid = false;\n    }\n  }\n\n  return valid;\n};\n\nconst join = (\n  email: string,\n  fields: {key: string; props: InputProps}[],\n  onSuccess: (res: AxiosResponse) => void,\n  onFailure: (msg: string) => void,\n): void => {\n\n  const questions = fields.map((i): Question => ({\n    key: i.key,\n    value: i.props.value,\n  }));\n\n  axios\n    .post('http://localhost:9000/v1/subscribe', { email, questions })\n    .then(res => {\n      onSuccess(res);\n    })\n    .catch(err => {\n      if (!err.response) {\n        onFailure(\"Something went wrong. Check your connection.\");\n      } else {\n        const { data }: { data: APIErrorResponse } = err.response;\n        onFailure(data.error);\n      }\n    });\n};\n\ntype JoinFormProps = {\n  containerClass: string;\n};\n\nconst JoinForm: FC<JoinFormProps> = ({ containerClass }) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const emailProps = useInput(\n    'email',\n    () =>\n      yup\n        .string()\n        .email()\n        .required(),\n    '',\n  );\n  const interestsProps = useInput(\n    'interests',\n    () => yup.string().required(),\n    '',\n  );\n  const projectProps = useInput('project', () => yup.string().required(), '');\n  const socialProps = useInput('social', () => yup.string().required(), '');\n  const [requestError, setRequestError] = useState('');\n\n  const allInputsValid = areInputsValid([\n    emailProps,\n    interestsProps,\n    projectProps,\n    socialProps,\n  ]);\n\n  const handleSuccess = (): void => setIsSubmitted(true);\n\n  const questions = [\n    {\n      key: 'What are your interests?',\n      props: interestsProps,\n    },\n    {\n      key: 'Do you have a project to work on during Flux event?',\n      props: projectProps,\n    },\n    {\n      key: 'Link to Instagram, Facebook or personal site',\n      props: socialProps,\n    },\n  ];\n\n  return (\n    <div className={containerClass}>\n      <InputField\n        {...emailProps}\n        type=\"email\"\n        className={s.input}\n        disabled={isSubmitted}\n      />\n      {questions.map(i => (\n        <InputField\n          key={i.key}\n          {...i.props}\n          type=\"text\"\n          placeholder={i.key}\n          className={s.input}\n          disabled={isSubmitted}\n        />\n      ))}\n      <ErrorMessage className={s.apiError} text={requestError} />\n      {isSubmitted ? (\n        <div className={s.successMessage}>\n          Thank you for your submission. We will contact your shortly! ðŸ‘»\n        </div>\n      ) : (\n        <Button\n          text=\"Submit\"\n          buttonClass={s.submitButton}\n          disabled={!allInputsValid}\n          onClick={(): void =>\n            join(emailProps.value, questions, handleSuccess, setRequestError)\n          }\n        />\n      )}\n    </div>\n  );\n};\n\nexport default JoinForm;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAIA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AAEA;AAGA;AAEA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAOA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAlBA;AAAA;AAAA;AACA;AAmBA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AADA;AAGA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;A","sourceRoot":""}